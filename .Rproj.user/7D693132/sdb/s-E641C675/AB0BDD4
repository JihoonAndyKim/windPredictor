{
    "collab_server" : "",
    "contents" : "#source('load.R')\nlibrary(circular)\n\nremoveNA <- function (testWind) {\n  \n  flag <- vector()\n  for(i in seq(nrow(testWind[,,1]))) {\n    if(all(is.na(testWind[i,12,]))) {\n      flag <- c(flag, i)\n    }\n  }\n  return(testWind[-flag,,])\n  \n}\n\nwindData = testWind\nwindDir  = testDirWind\n\ncrps.gamma <- function(beta, obs, dirMean, ensMean, ensVar){\n  use <- !is.na(obs) & !is.na(ensMean) & !is.na(dirMean)\n  \n  dirMean <- dirMean * pi / 180\n  \n  mu <- beta[1] + beta[2]*ensMean[use] + beta[5] * dvonmises(circular(dirMean[use]), mu = circular(beta[6]), kappa = beta[7])\n  sigma <- beta[3] + beta[4]*ensVar[use]\n  \n  shape <- mu^2/sigma\n  scale <- sigma/mu\n  y <- as.numeric(obs[use])\n  #print(\"------------------------\")\n  \n  crps1 <- y*(2*pgamma(y,shape=shape,scale=scale)-1) - shape*scale*(2*pgamma(y,shape=shape+1,scale=scale)-1)\n  crps2 <- shape*scale*beta(.5,shape+.5)/pi\n  crps <- crps1 - crps2\n  \n  return(mean(crps))\n}\n\n\n# crps.truncnorm <- function(beta, obs, ensMean, ensVar){\n#   \n#   use <- !is.na(obs) & !is.na(ensMean)\n#   \n#   mu <- beta[1] + beta[2]*ensMean[use]\n#   sigma <- beta[3] + beta[4]*ensVar[use]\n#   \n#   y.tld <- (obs[use]-mu)/sqrt(sigma)\n#   c.tld <- mu/sqrt(sigma)\n#   \n#   crps <- sqrt(sigma)/pnorm(c.tld)^2 * (y.tld*pnorm(c.tld)*(2*pnorm(y.tld)+pnorm(c.tld)-2) +\n#                                           2*dnorm(y.tld)*pnorm(c.tld) - pnorm(sqrt(2)*c.tld)/sqrt(pi)  )\n#   \n#   return(mean(crps))\n# }\n\n\n\n\n\n\n\n\n# init.dates <- as.numeric(obs$Date)\n# months <- unique(init.dates %/% 10000)\n# nm <- length(months)\n# \n# #Parameters as follows: month, location, lead time, parameters\n# optVar <- array(dim=c(nm-36,5,3,7))\n# \n# for (st in 1:1)  {\n#   cat(paste(\"Fitting station\", st, \"\\n\"))\n#   for (lt in 1:3)  {\n#     cat(paste(\"Fitting lead time\", lt, \"\\n\"))\n#     for (im in 1:(nm-36))  {\n#       print(im)\n#       yyyy <- months[im+36] %/% 100\n#       mm <- months[im+36] %% 100\n#       yeardiff <- yyyy - months %/% 100\n#       monthdiff <- pmin( abs(mm-months%%100), abs(mm-12-months%%100), abs(mm+12-months%%100) )\n#       months.train <- months[yeardiff>0 & yeardiff<4 & monthdiff<=1]\n#       ind.train <- (init.dates %/% 10000) %in% months.train\n#       par0 <- c(0.1, 1, 0.1, 1, 0.1, 0, 1)\n#       mean2 <- function(x) {\n#         mean(as.numeric(x))\n#       }\n#       var2 <- function(x) {\n#         var(as.numeric(x))\n#       }\n# \n#       est <- optim(par0, crps.gamma,\n#                    obs       = windData[ind.train,12,lt],\n#                    dirMean   = apply(windDir[ind.train,1:11,lt],1,mean2),\n#                    ensMean   = apply(windData[ind.train,1:11,lt],1,mean2),\n#                    ensVar    = apply(windData[ind.train,1:11,lt],1,var2),\n#                    method    = \"L-BFGS-B\",\n#                    lower     = c(2e-3, 0, 2e-3, 0, -pi, 0),\n#                    upper     = c(  15, 5,   20, 5, 5, pi, 100),\n#                    control = list(factr=1e-5/.Machine$double.eps))\n# \n#       par0 <- est$par\n#       optVar[im,st,lt,] <- est$par\n#     }\n#   }\n# }\n\n\n\n\n\n\n\n\n\nlowerBound = 0.4\nupperBound = 0.7\n\nstartWindow = 5900\nendWindow = 6000\ncount <- 0\nstoreCRPSvonMises <- c()\n\nfor(testDay in startWindow:endWindow) {\n  \n  findTrainMonth = match(init.dates[testDay] %/% 10000, months)\n  \n  for(leadTime in 1:3) {\n    \n    testPar <- optVar[findTrainMonth - 36,1,leadTime,]\n    testForecast <- windData[testDay,1:11,leadTime]\n    testWindDir <- mean(as.numeric(windDir[testDay, 1:11, leadTime])) * pi / 180\n    \n    d = dvonmises(circular(testWindDir), mu = circular(testPar[6]), kappa = testPar[7])\n    mu <-testPar[1] * testPar[2]*mean(as.numeric(testForecast)) + testPar[5] * d\n    sigma <- testPar[3] + testPar[4]*var(as.numeric(testForecast))\n    \n    lambda = mu/sigma\n    alpha = mu^2/sigma\n    \n    shape = alpha\n    scale = 1/lambda\n    \n    observed = as.numeric(windData[testDay + 165, 12, leadTime])\n    \n    crps1 <- observed*(2*pgamma(observed,shape=shape,scale=scale)-1) - shape*scale*(2*pgamma(observed,shape=shape+1,scale=scale)-1)\n    crps2 <- shape*scale*beta(.5,shape+.5)/pi\n    crps <- crps1 - crps2\n    \n    storeCRPSvonMises <- c(storeCRPSvonMises, crps)\n    \n    percent <- qgamma(c(lowerBound, upperBound), shape=alpha, rate=lambda)\n    \n    if(!all(is.na(percent))) {\n      if(observed > percent[1] & observed < percent[2]) {\n        count = count + 1\n      }\n    }\n  }\n}\nprint(count/300)",
    "created" : 1487957444563.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3253197714",
    "id" : "AB0BDD4",
    "lastKnownWriteTime" : 1487958318,
    "last_content_update" : 1487958318399,
    "path" : "~/Documents/CUStuff/Research/NewCode/model.R",
    "project_path" : "model.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}