{
    "collab_server" : "",
    "contents" : "source('load.R')\n\nremoveNA <- function (testWind) {\n  \n  flag <- vector()\n  for(i in seq(nrow(testWind[,,1]))) {\n    if(all(is.na(testWind[i,12,]))) {\n      flag <- c(flag, i)\n    }\n  }\n  return(testWind[-flag,,])\n  \n}\n\nmean2 <- function(x) {\n  mean(as.numeric(x))\n}\n\nvar2 <- function(x) {\n  var(as.numeric(x))\n}\n\nwindData = testWind\n\ncrps.gamma <- function(beta, obs, ensMean, ensVar){\n  use <- !is.na(obs) & !is.na(ensMean)\n  \n  mu <- beta[1] + beta[2]*ensMean[use]\n  sigma <- beta[3] + beta[4]*ensVar[use]\n  \n  shape <- mu^2/sigma\n  scale <- sigma/mu\n  y <- as.numeric(obs[use])\n  #print(\"------------------------\")\n  crps1 <- y*(2*pgamma(y,shape=shape,scale=scale)-1) - shape*scale*(2*pgamma(y,shape=shape+1,scale=scale)-1)\n  crps2 <- shape*scale*beta(.5,shape+.5)/pi\n  crps <- crps1 - crps2\n  \n  return(mean(crps))\n}\n\n\ncrps.truncnorm <- function(beta, obs, ensMean, ensVar){\n  \n  use <- !is.na(obs) & !is.na(ensMean)\n  \n  mu <- beta[1] + beta[2]*ensMean[use]\n  sigma <- beta[3] + beta[4]*ensVar[use]\n  \n  y.tld <- (obs[use]-mu)/sqrt(sigma)\n  c.tld <- mu/sqrt(sigma)\n  \n  crps <- sqrt(sigma)/pnorm(c.tld)^2 * (y.tld*pnorm(c.tld)*(2*pnorm(y.tld)+pnorm(c.tld)-2) +\n                                          2*dnorm(y.tld)*pnorm(c.tld) - pnorm(sqrt(2)*c.tld)/sqrt(pi)  )\n  \n  return(mean(crps))\n}\n\ninit.dates <- as.numeric(obs$Date)\nmonths <- unique(init.dates %/% 10000)\nnm <- length(months)\nlt <- 1\navgDir <- apply(testDirWind[1:length(init.dates), 1:11, lt], 1, mean2)\ndf <- do.call(rbind, Map(data.frame, dir=avgDir, ind=1:length(init.dates)))\ninit.d <- init.dates[df[which(df[,1] > -135 & df[,1] < -45), 2]]\n\n#Parameters as follows: month, location, lead time, parameters\noptVar <- array(dim=c(nm-36,5,3,4))\n\nfor (st in 1:1)  {\n  cat(paste(\"Fitting station\", st, \"\\n\"))\n  for (lt in 1:3)  {\n    cat(paste(\"Fitting lead time\", lt, \"\\n\"))\n    for (im in 1:(nm-36))  {\n      print(im)\n      yyyy <- months[im+36] %/% 100\n      mm <- months[im+36] %% 100\n      yeardiff <- yyyy - months %/% 100\n      monthdiff <- pmin( abs(mm-months%%100), abs(mm-12-months%%100), abs(mm+12-months%%100) )\n      months.train <- months[yeardiff>0 & yeardiff<4 & monthdiff<=3]\n      ind.train <- (init.d %/% 10000) %in% months.train\n      \n      par0 <- c(0.1, 1, 0.1, 1)\n      \n      est <- optim(par0, crps.gamma,\n                   obs       = windData[ind.train,12,lt],\n                   ensMean   = apply(windData[ind.train,1:11,lt],1,mean2),\n                   ensVar    = apply(windData[ind.train,1:11,lt],1,var2),\n                   method    = \"L-BFGS-B\",\n                   lower     = c(2e-3, 0, 2e-3, 0),\n                   upper     = c(  15, 5,   20, 5),\n                   control = list(factr=1e-5/.Machine$double.eps))\n      \n      par0 <- est$par\n      optVar[im,st,lt,] <- est$par\n    }\n  }\n}\n\nlowerBound = 0.4\nupperBound = 0.7\n\nstartWindow = 5900\nendWindow = 6000\ncount <- 0\n\nfor(testDay in startWindow:endWindow) {\n  \n  findTrainMonth = match(init.dates[testDay] %/% 10000, months)\n  \n  for(leadTime in 1:3) {\n    \n    testPar <- optVar[findTrainMonth - 36,1,leadTime,]\n    testForecast <- windData[testDay,1:11,leadTime]\n    mu <-testPar[1] * testPar[2]*mean(as.numeric(testForecast))\n    sigma <- testPar[3] + testPar[4]*var(as.numeric(testForecast))\n    \n    lambda = mu/sigma\n    alpha = mu^2/sigma\n    \n    observed = windData[testDay + 165, 12, leadTime]\n    variance = alpha/lambda^2\n    print(variance)\n    percent <- qgamma(c(lowerBound, upperBound), shape=alpha, rate=lambda)\n    \n    # curve(dgamma(x, shape=alpha, rate=lambda), from=0, to=15, n=500, type=\"l\", xlab = \"Wind Speed\", ylab = \"\")\n    # abline(v = observed)\n    # abline(v = percent[1], col = 'blue')\n    # abline(v = percent[2], col = 'blue')\n    \n    if(!all(is.na(percent))) {\n      if(observed > percent[1] & observed < percent[2]) {\n        count = count + 1\n      }\n      else {\n        # curve(dgamma(x, shape=alpha, rate=lambda), from=0, to=15, n=500, type=\"l\", xlab = \"Wind Speed\", ylab = \"\")\n        # abline(v = observed)\n        # abline(v = percent[1], col = 'blue')\n        # abline(v = percent[2], col = 'blue')\n      }\n    }\n  }\n}\nprint(count/300)\n# plot(diffs, scores, type=\"o\")\n# abline(h = upperBound - lowerBound, col = 'blue')\n\n\n",
    "created" : 1487314986759.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1357429353",
    "id" : "3ADD12A9",
    "lastKnownWriteTime" : 1487315144,
    "last_content_update" : 1487315144772,
    "path" : "~/CUStuff/Senior Year/Research/NewCode/bin.R",
    "project_path" : "bin.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}